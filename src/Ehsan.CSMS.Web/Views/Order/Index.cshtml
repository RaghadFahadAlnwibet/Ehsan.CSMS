@model OrderViewModel
@{
    ViewData["Title"] = "Order";
}
<link rel="stylesheet" href="~/css/index.css" asp-append-version="true" />

<form method="post" asp-action="Index" asp-controller="Order" class="p-4 shadow-sm border rounded mb-5">
    <h3 class="text-dark mb-4">Search Order</h3>
    <div class="form-group pb-3">
        @Html.LabelFor(c => c.OrderSearchCriteria.Id, new { @class = "form-label" })
        @Html.TextBoxFor(c => c.OrderSearchCriteria.Id, new { @class = "form-control", @placeholder = "Enter Order ID" })
    </div>
    <div class="form-groupp pb-3">
        @Html.LabelFor(c => c.OrderSearchCriteria.CashierId, new { @class = "form-label" })
        @Html.DropDownListFor(c => c.OrderSearchCriteria.CashierId,
                                                 ViewBag.Cashiers as SelectList, 
                                                "Select Cashier",
                                                 new { @class = "form-control"})
    </div>
    @* <div class="form-groupp pb-3"> *@
    @*     @Html.LabelFor(c => c.OrderSearchCriteria.OrderStatus, new { @class = "form-label" }) *@
    @*     @Html.DropDownListFor(c => c.OrderSearchCriteria.OrderStatus, *@
    @*              Html.GetEnumSelectList<OrderStatus>(), *@
    @*              "Select Status", *@
    @*              new { @class = "form-control", @value = Model.OrderSearchCriteria.OrderStatus }) *@
    @* </div> *@
    <button type="submit" class="btn mt-3 mainbtn sumbit" >Search</button>
    <a type="button" asp-controller="Order" asp-action="Index" class="btn mt-3 reset-btn">Reset</a>
</form>

<div class="header-container">
    <h3 class="text-dark mb-4">Order List</h3>
    <a asp-action="Create" asp-controller="Order">
        <i class='bx bx-plus'></i>
        Add Order
    </a>
</div>

<div class="filter-tabs">
    <ul class="nav nav-tabs">
        @await Html.PartialAsync("_orderStatusSelection", 
                    new ViewDataDictionary(ViewData) 
         {
        {"Orderstatus", default(OrderStatus)},
        {"DisplayName", "All"} 
         })
        @await Html.PartialAsync("_orderStatusSelection",
                 new ViewDataDictionary(ViewData)
        {
        {"Orderstatus", OrderStatus.New},
        {"DisplayName", nameof(OrderStatus.New)}
        })

        @await Html.PartialAsync("_orderStatusSelection",
                 new ViewDataDictionary(ViewData)
        {
        {"Orderstatus", OrderStatus.InProgress},
        {"DisplayName", nameof(OrderStatus.InProgress)}
        })

        @await Html.PartialAsync("_orderStatusSelection",
                 new ViewDataDictionary(ViewData)
        {
        {"Orderstatus", OrderStatus.Done},
        {"DisplayName",  nameof(OrderStatus.Done)}
        })

        @await Html.PartialAsync("_orderStatusSelection",
                 new ViewDataDictionary(ViewData)
        {
        {"Orderstatus", OrderStatus.Rejected},
        {"DisplayName", nameof(OrderStatus.Rejected)}
        })
        @await Html.PartialAsync("_orderStatusSelection",
                 new ViewDataDictionary(ViewData)
        {
        {"Orderstatus", OrderStatus.Canceled},
        {"DisplayName", @OrderStatus.Canceled}
        })
    </ul>
</div>

<table class="task-table">
    <thead>
        <tr>
            <th>Id</th>
            <th>Customer Name</th>
            <th>Cashier Name</th>
            <th>Creation time</th>
            <th>Total price</th>
            <th>Order Status</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var order in Model.orders)
        {
            <tr>
                <td>@Html.Encode(order.Id)</td>
                <td>@Html.Encode(order.Customer.Name)</td>
                <td>@Html.Encode(order.Cashier.Name)</td>
                <td>@Html.Encode(order.CreationTime.ToString("dd MMM yyyy"))</td>
                <td>@Html.Encode(order.TotalPrice)</td>
                @{
                    var status = (int)order.OrderStatus;
                    switch (status)
                    {
                        case 1:
                        <td> <span class="badge rounded-pill bg-info" style="color:white; padding:6px; width: 80px;">@Html.DisplayFor(c => order.OrderStatus)</span></td>
                            break;
                        case 2:
                        <td> <span class="badge rounded-pill bg-primary" style="color:white; padding:6px; width: 90px;">@Html.DisplayFor(c => order.OrderStatus)</span></td>
                            break;
                        case 3:
                        <td> <span class="badge rounded-pill bg-success" style="color:white; padding:6px; width: 90px;">@Html.DisplayFor(c => order.OrderStatus)</span></td>
                            break;
                        case 4:
                        <td> <span class="badge rounded-pill bg-danger" style="color:white; padding:6px; width: 80px;">@Html.DisplayFor(c => order.OrderStatus)</span></td>
                            break;
                        case 5:
                        <td> <span class="badge rounded-pill bg-secondary" style="color:white; padding:6px; width: 80px;">@Html.DisplayFor(c => order.OrderStatus)</span></td>
                            break;
                    }
                }
                <td>
                    <div class="dropdown">
                        <button class="dropdown-button">⋮</button>
                        <div class="dropdown-content">
                            @if((int)order.OrderStatus != 3)
                            {
                                @Html.ActionLink("Edit", "Edit", new { id = order.Id })
                            }
                            @Html.ActionLink("Details", "Details", new { id = order.Id })
                            @Html.ActionLink("Delete", "Delete", new { id = order.Id })
                        </div>
                    </div>
                </td>
            </tr>
        }
    </tbody>
</table>








